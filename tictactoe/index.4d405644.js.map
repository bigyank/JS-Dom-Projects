{"mappings":"svBAAA,IAAMA,EAAkBC,SAASC,cAAc,kBACzCC,EAAWF,SAASC,cAAc,cAElCE,EAAYJ,EAAgBE,cAAc,WAC1CG,EAAYF,EAASG,iBAAiB,cAEtCC,EAAuB,CAC3B,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGLC,GAAY,EAEVC,EAAQ,IAGP,SAASC,EAASC,GACvB,OAAOJ,EAAqBK,MAAK,SAACC,GAChC,OAAOA,EAAYC,OAAM,SAACC,GACxB,OAAOJ,EAAOK,SAASD,SAWtB,SAASE,EAASC,GACvBd,EAAUe,YAAV,GAAAC,OAA2BF,IAAST,EAAQ,YAAc,aAiBrD,SAASY,EAAQC,GACtBlB,EAAUe,YAAcG,EACxBd,GAAY,ECxDd,IAAML,EAAWF,SAASC,cAAc,wHCYxC,MAAMF,EAAkBC,SAASC,cAAc,kBACzCC,EAAWF,SAASC,cAAc,cAElCqB,EAAWvB,EAAgBE,cAAc,UACzCG,EAAYF,EAASG,iBAAiB,cAExCkB,EAAU,GACVC,EAAU,GAEd,SAASC,EAASC,GAChB,GFsCOnB,EEtCP,CAEA,IAAMoB,EAAOD,EAAEE,OACPX,EAASf,EAAS2B,QAAlBZ,KACAa,EAAkBH,EAAKE,QAAvBC,cAGR,IAAIH,EAAKE,QAAQnB,OAajB,OARAiB,EAAKE,QAAQnB,OAASO,EDpBjB,SAAoBA,GAEpBf,EAAS2B,QAAQZ,KAdV,MAaZA,EAZY,IADA,ICmCZc,CAAWd,GDhCN,SAAkBA,EAAMU,GAC7B,IAAMK,EAAchC,SAASiC,cAAc,QAEtCD,EAAYE,UANL,MAKZjB,EAC6B,UACA,UAC7Be,EAAYd,YAAcD,EAC1BU,EAAKQ,YAAYH,GC2BjBI,CAASnB,EAAMU,GF+BV,SAAqBV,EAAMa,EAAeP,EAASC,GACxDP,IAAST,EACLe,EAAQc,KAAKC,SAASR,EAAe,KACrCN,EAAQa,KAAKC,SAASR,EAAe,KEjCzCS,CAAYtB,EAAMa,EAAeP,EAASC,IAGlC,GACN,KAAKgB,EAASjB,GACZkB,EAAQ,iBACR,MACF,KAAKD,EAAShB,GACZiB,EAAQ,iBACR,MACF,KFlBKC,EAAItC,GAAWS,OAAM,SAACc,GAC3B,OAAOA,EAAKE,QAAQnB,UEkBlB+B,EAAQ,SACR,MACF,QACEE,EAAS1B,KAIfK,EAASsB,iBAAiB,SAAS,WAAA,OFjBTrB,EEiByBA,EFjBhBC,EEiByBA,OFhB1DkB,EAAItC,GAAWyC,KAAI,SAAClB,GAClBA,EAAKmB,UAAY,GACjBnB,EAAKoB,gBAAgB,eACrB7C,EAAS2B,QAAQZ,KAAOT,EACxBQ,EAzBU,KA0BVO,EAAQyB,OAAS,EACjBxB,EAAQwB,OAAS,EAGjBzC,GAAY,KAVT,IAAmBgB,EAASC,QEmB/BpB,imBAAWyC,KAAI,SAAClB,GAAD,OAAUA,EAAKiB,iBAAiB,QAASnB","sources":["./src/javascript/game.js","./src/javascript/gameCell.js","./src/javascript/index.js"],"sourcesContent":["const statusContainer = document.querySelector('.status-action');\r\nconst gameGrid = document.querySelector('.game-grid');\r\n\r\nconst statusDiv = statusContainer.querySelector('.status');\r\nconst gameCells = gameGrid.querySelectorAll('.game-cell');\r\n\r\nconst WINNING_COMBINATIONS = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [2, 4, 6],\r\n];\r\n\r\nlet isRunning = true;\r\n\r\nconst xChar = '×';\r\nconst oChar = '○';\r\n\r\nexport function checkWin(player) {\r\n  return WINNING_COMBINATIONS.some((combination) => {\r\n    return combination.every((index) => {\r\n      return player.includes(index);\r\n    });\r\n  });\r\n}\r\n\r\nexport function isDraw() {\r\n  return [...gameCells].every((cell) => {\r\n    return cell.dataset.player;\r\n  });\r\n}\r\n\r\nexport function showTurn(turn) {\r\n  statusDiv.textContent = `${turn === xChar ? 'o is next' : 'x is next'}`;\r\n}\r\n\r\nexport function resetGame(playerX, playerO) {\r\n  [...gameCells].map((cell) => {\r\n    cell.innerHTML = '';\r\n    cell.removeAttribute('data-player');\r\n    gameGrid.dataset.turn = xChar;\r\n    showTurn(oChar, xChar);\r\n    playerX.length = 0;\r\n    playerO.length = 0;\r\n    // playerX = [];\r\n    // playerO = [];\r\n    isRunning = true;\r\n  });\r\n}\r\n\r\nexport function endGame(message) {\r\n  statusDiv.textContent = message;\r\n  isRunning = false;\r\n}\r\n\r\nexport function isGameRunning() {\r\n  return isRunning;\r\n}\r\n\r\n// export function updateMoves(turn, cellidentifer, playerX, playerO) {\r\n//   turn === xChar\r\n//     ? (playerX = [...playerX, parseInt(cellidentifer, 10)])\r\n//     : (playerO = [...playerO, parseInt(cellidentifer, 10)]);\r\n// }\r\n\r\nexport function updateMoves(turn, cellidentifer, playerX, playerO) {\r\n  turn === xChar\r\n    ? playerX.push(parseInt(cellidentifer, 10))\r\n    : playerO.push(parseInt(cellidentifer, 10));\r\n}\r\n","const gameGrid = document.querySelector('.game-grid');\r\n\r\nconst xChar = '×';\r\nconst oChar = '○';\r\n\r\nexport function markCell(turn, cell) {\r\n  const spanElement = document.createElement('span');\r\n  turn === xChar\r\n    ? (spanElement.className = 'playerx')\r\n    : (spanElement.className = 'playery');\r\n  spanElement.textContent = turn;\r\n  cell.appendChild(spanElement);\r\n}\r\n\r\nexport function updateTurn(turn) {\r\n  turn === xChar\r\n    ? (gameGrid.dataset.turn = oChar)\r\n    : (gameGrid.dataset.turn = xChar);\r\n}\r\n","import {\r\n  checkWin,\r\n  isDraw,\r\n  showTurn,\r\n  resetGame,\r\n  endGame,\r\n  isGameRunning,\r\n  updateMoves,\r\n} from './game';\r\n\r\nimport { markCell, updateTurn } from './gameCell';\r\n\r\nconst statusContainer = document.querySelector('.status-action');\r\nconst gameGrid = document.querySelector('.game-grid');\r\n\r\nconst resetDiv = statusContainer.querySelector('.reset');\r\nconst gameCells = gameGrid.querySelectorAll('.game-cell');\r\n\r\nlet playerX = [];\r\nlet playerO = [];\r\n\r\nfunction playGame(e) {\r\n  if (!isGameRunning()) return;\r\n\r\n  const cell = e.target;\r\n  const { turn } = gameGrid.dataset;\r\n  const { cellidentifer } = cell.dataset;\r\n\r\n  // dont change if the grid is already taken\r\n  if (cell.dataset.player) {\r\n    return;\r\n  }\r\n\r\n  // mark the choosen cell in data-attribute\r\n  cell.dataset.player = turn;\r\n\r\n  // update turn, DOM and players moves\r\n  updateTurn(turn);\r\n  markCell(turn, cell);\r\n  updateMoves(turn, cellidentifer, playerX, playerO);\r\n\r\n  // check game status\r\n  switch (true) {\r\n    case checkWin(playerX):\r\n      endGame('Player 1 wins');\r\n      break;\r\n    case checkWin(playerO):\r\n      endGame('Player 2 wins');\r\n      break;\r\n    case isDraw(gameCells):\r\n      endGame('Draw!');\r\n      break;\r\n    default:\r\n      showTurn(turn);\r\n  }\r\n}\r\n\r\nresetDiv.addEventListener('click', () => resetGame(playerX, playerO));\r\n\r\n[...gameCells].map((cell) => cell.addEventListener('click', playGame));\r\n"],"names":["statusContainer","document","querySelector","gameGrid","statusDiv","gameCells","querySelectorAll","WINNING_COMBINATIONS","isRunning","xChar","checkWin","player","some","combination","every","index","includes","showTurn","turn","textContent","concat","endGame","message","resetDiv","playerX","playerO","playGame","e","cell","target","dataset","cellidentifer","$cc605ce59f01bff232c4fe079914e2f$export$updateTurn","spanElement","createElement","className","appendChild","$cc605ce59f01bff232c4fe079914e2f$export$markCell","push","parseInt","$ea8aac08197f32247535b1781ba37cba$export$updateMoves","$ea8aac08197f32247535b1781ba37cba$export$checkWin","$ea8aac08197f32247535b1781ba37cba$export$endGame","$ea8aac08197f32247535b1781ba37cba$var$_toConsumableArray","$ea8aac08197f32247535b1781ba37cba$export$showTurn","addEventListener","map","innerHTML","removeAttribute","length"],"version":3,"file":"index.4d405644.js.map"}